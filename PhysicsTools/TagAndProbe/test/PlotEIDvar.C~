#define PlotEIDvar_cxx
#include "PlotEIDvar.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
using namespace std;
void PlotEIDvar::Loop()
{
   if (fChain == 0) return;
   float pt[7] = {10,15,20,30,40,50,200};
   float eta[6] = {0.0,0.8,1.4442,1.566,2.0,2.5};
    TFile* file  = new TFile("PlotTnMediumIDVarData.root","RECREATE");
    TH1D* elePtAll=new TH1D("elePtAll","elePtAll",100,0,500);
    TH1D* eleEtaAll=new TH1D("eleEtaAll","eleEtaAll",100,-2.6,2.6);
    TH1D* eleEB_dEtaIn=new TH1D("eleEB_dEtaIn","eleEB_dEtaIn",100,-0.006,0.006);
    TH1D* eleEB_dPhiIn=new TH1D("eleEB_dPhiIn","eleEB_dPhiIn",100,-0.08,0.08);
    TH1D* eleEB_sigmaIEtaIEta=new TH1D("eleEB_sigmaIEtaIEta","eleEB_sigmaIEtaIEta",100,0,0.02);
    TH1D* eleEB_hoe=new TH1D("eleEB_hoe","eleEB_hoe",100,0.,0.2);
    TH1D* eleEB_d0vtx=new TH1D("eleEB_d0vtx","eleEB_d0vtx",100,-0.03,0.03);
    TH1D* eleEB_dzvtx=new TH1D("eleEB_dzvtx","eleEB_dzvtx",100,-0.2,0.2);
    TH1D* eleEB_ooemoop=new TH1D("eleEB_ooemoop","eleEB_ooemoop",100,0.,0.06);
    TH1D* eleEB_iso=new TH1D("eleEB_iso","eleEB_iso",100,0.0,0.2);
    TH1D* eleEB_iso_ch=new TH1D("eleEB_iso_ch","eleEB_iso_ch",100,0.,40.0);
    TH1D* eleEB_iso_em=new TH1D("eleEB_iso_em","eleEB_iso_em",100,0.,40.0);
    TH1D* eleEB_iso_nh=new TH1D("eleEB_iso_nh","eleEB_iso_nh",100,0.,40.0);
    TH1D* eleEE_dEtaIn=new TH1D("eleEE_dEtaIn","eleEE_dEtaIn",100,-0.008,0.008);
    TH1D* eleEE_dPhiIn=new TH1D("eleEE_dPhiIn","eleEE_dPhiIn",100,-0.08,0.08);
    TH1D* eleEE_sigmaIEtaIEta=new TH1D("eleEE_sigmaIEtaIEta","eleEE_sigmaIEtaIEta",100,0,0.05);
    TH1D* eleEE_hoe=new TH1D("eleEE_hoe","eleEE_hoe",100,0.,0.2);
    TH1D* eleEE_d0vtx=new TH1D("eleEE_d0vtx","eleEE_d0vtx",100,-0.03,0.03);
    TH1D* eleEE_dzvtx=new TH1D("eleEE_dzvtx","eleEE_dzvtx",100,-0.2,0.2);
    TH1D* eleEE_ooemoop=new TH1D("eleEE_ooemoop","eleEE_ooemoop",100,0.,0.06);
    TH1D* eleEE_iso=new TH1D("eleEE_iso","eleEE_iso",100,0.0,0.2);
    TH1D* eleEE_iso_ch=new TH1D("eleEE_iso_ch","eleEE_iso_ch",100,0.,40.0);
    TH1D* eleEE_iso_em=new TH1D("eleEE_iso_em","eleEE_iso_em",100,0.,40.0);
    TH1D* eleEE_iso_nh=new TH1D("eleEE_iso_nh","eleEE_iso_nh",100,0.,40.0);
    TH2D* ele_PtVsEta0=new TH2D("ele_PtVsEta0","ele_PtVsEta0",6,pt,5,eta);
    TH2D* ele_PtVsEta1=new TH2D("ele_PtVsEta1","ele_PtVsEta1",6,pt,5,eta);
    TH2D* ele_PtVsEta2=new TH2D("ele_PtVsEta2","ele_PtVsEta2",6,pt,5,eta);
    TH2D* ele_PtVsEta3=new TH2D("ele_PtVsEta3","ele_PtVsEta3",6,pt,5,eta);
    TH2D* ele_PtVsEta4=new TH2D("ele_PtVsEta4","ele_PtVsEta4",6,pt,5,eta);
    TH2D* ele_PtVsEta5=new TH2D("ele_PtVsEta5","ele_PtVsEta5",6,pt,5,eta);
    TH2D* ele_PtVsEta6=new TH2D("ele_PtVsEta6","ele_PtVsEta6",6,pt,5,eta);
    TH2D* ele_PtVsEta7=new TH2D("ele_PtVsEta7","ele_PtVsEta7",6,pt,5,eta);
    TH2D* ele_PtVsEta8=new TH2D("ele_PtVsEta8","ele_PtVsEta8",6,pt,5,eta);
    TH2D* ele_PtVsEtaAll=new TH2D("ele_PtVsEtaAll","ele_PtVsEtaAll",6,pt,5,eta);

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      if(!(jentry%10))std::cout<<jentry<<std::endl;
      double probePt = probe_gsfEle_pt;
      double probeEta = probe_sc_abseta;
      //double PUweight=1;
      if(!(probe_sc_abseta<=1.4442 || (probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)))continue;
      //  if(!( mass > 80 && mass <100 ) )continue;
      if(!( mcTrue && mass > 80 && mass <100 && tag_dRTau >0.2 && probe_dRTau > 0.2) )continue;
	  ele_PtVsEta0->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
      if(probe_isWPMedium) { 
	  ele_PtVsEtaAll->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  elePtAll->Fill(probe_gsfEle_pt,PUweight);
	  eleEtaAll->Fill(probe_sc_abseta,PUweight);
      }
      bool b1=0,b2=0,b3=0,b4=0,b5=0,b6=0,b7=0,b8=0,b9=0,b10=0;
      if(probe_sc_abseta<=1.4442)
	{
	  b1=abs(probe_gsfEle_dEtaIn)<0.004;
	  b2=abs(probe_gsfEle_dPhiIn)<0.06;
	  b3=probe_gsfEle_sigmaIEtaIEta<0.01;
	  b4=probe_gsfEle_hoe<0.12;
	  b5=abs(probe_d0vtx)<0.02;
	  b6=abs(probe_dzvtx)<0.1;
	  b7=abs(probe_gsfEle_ooemoop)<0.05;
	  b8=probe_iso<0.15;
	  b9=probe_vtxFitConversion<1;
	  b10=probe_gsfEle_mHits<=1;
	}else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	{
	  b1=abs(probe_gsfEle_dEtaIn)<0.007;
	  b2=abs(probe_gsfEle_dPhiIn)<0.03;
	  b3=probe_gsfEle_sigmaIEtaIEta<0.03;
	  b4=probe_gsfEle_hoe<0.10;
	  b5=abs(probe_d0vtx)<0.02;
	  b6=abs(probe_dzvtx)<0.1;
	  b7=abs(probe_gsfEle_ooemoop)<0.05;
	  if(probe_gsfEle_pt<20.)b8=probe_iso<0.10; else b8=probe_iso<0.15;
	  b9=probe_vtxFitConversion<0.1;
	  b10=probe_gsfEle_mHits<=1;
	}
      if(b2 && b3 && b4 && b5 && b6 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta1->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	    eleEB_dEtaIn->Fill(probe_gsfEle_dEtaIn,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_dEtaIn->Fill(probe_gsfEle_dEtaIn,PUweight);
	    }
	}
      if(b1 && b3 && b4 && b5 && b6 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta2->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_dPhiIn->Fill(probe_gsfEle_dPhiIn,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_dPhiIn->Fill(probe_gsfEle_dPhiIn,PUweight);
	    }
	}
      if(b1 && b2 && b4 && b5 && b6 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta3->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_sigmaIEtaIEta->Fill(probe_gsfEle_sigmaIEtaIEta,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_sigmaIEtaIEta->Fill(probe_gsfEle_sigmaIEtaIEta,PUweight);
	    }
	}
      if(b1 && b2 && b3 && b5 && b6 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta4->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_hoe->Fill(probe_gsfEle_hoe,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_hoe->Fill(probe_gsfEle_hoe,PUweight);
	    }
	}
      if(b1 && b2 && b3 && b4 && b6 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta5->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_d0vtx->Fill(probe_d0vtx,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_d0vtx->Fill(probe_d0vtx,PUweight);
	    }
	}
      if(b1 && b2 && b3 && b4 && b5 && b7 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta6->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_dzvtx->Fill(probe_dzvtx,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_dzvtx->Fill(probe_dzvtx,PUweight);
	    }
	}
      if(b1 && b2 && b3 && b4 && b5 && b6 && b8 && b9 && b10) 
	{ 
	  ele_PtVsEta7->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_ooemoop->Fill(probe_gsfEle_ooemoop,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_ooemoop->Fill(probe_gsfEle_ooemoop,PUweight);
	    }
	}
      if(b1 && b2 && b3 && b4 && b5 && b6 && b7 && b9 && b10) 
	{ 
	  ele_PtVsEta8->Fill(probe_gsfEle_pt,probe_sc_abseta,PUweight);
	  if(probe_sc_abseta<=1.4442)
	    {
	      eleEB_iso->Fill(probe_iso,PUweight);
	      eleEB_iso_ch->Fill(probe_iso_ch,PUweight);
	      eleEB_iso_em->Fill(probe_iso_em,PUweight);
	      eleEB_iso_nh->Fill(probe_iso_nh,PUweight);
	    }
	  else if(probe_sc_abseta>=1.566 && probe_sc_abseta<=2.5)
	    {
	      eleEE_iso->Fill(probe_iso,PUweight);
	      eleEE_iso_ch->Fill(probe_iso_ch,PUweight);
	      eleEE_iso_em->Fill(probe_iso_em,PUweight);
	      eleEE_iso_nh->Fill(probe_iso_nh,PUweight);
	    }
	}
   }
   file->Write();
   file->Close();
}
